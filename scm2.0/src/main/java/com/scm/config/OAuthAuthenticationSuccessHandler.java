package com.scm.config;

import java.io.IOException;
import java.util.List;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;
import org.springframework.security.oauth2.core.user.DefaultOAuth2User;
import org.springframework.security.web.DefaultRedirectStrategy;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.stereotype.Component;

import com.scm.entities.Providers;
import com.scm.entities.User;
import com.scm.helper.AppConstants;
import com.scm.repository.UserRepository;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class OAuthAuthenticationSuccessHandler implements AuthenticationSuccessHandler {

  @Autowired
  private UserRepository repo;

  Logger logger = LoggerFactory.getLogger(OAuthAuthenticationSuccessHandler.class);
  
  @Override
  public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,
      Authentication authentication) throws IOException, ServletException {
        
    logger.info("OAuthAuthenticationSuccessHandler");

    var oAuth2AuthenticationToken = (OAuth2AuthenticationToken) authentication;
       
    String authorizedClientRegistrationId = oAuth2AuthenticationToken.getAuthorizedClientRegistrationId();

    logger.info(authorizedClientRegistrationId);

    var oauth2User = (DefaultOAuth2User) authentication.getPrincipal();

    oauth2User.getAttributes().forEach((key,value)->{
        logger.info("{} => {}",key,value);
    });

    User user1 = new User();
    user1.setUserId(UUID.randomUUID().toString());
    user1.setEnabled(true);
    user1.setEmailVerified(true);
    user1.setRoleList(List.of(AppConstants.ROLE_USER));

    if (authorizedClientRegistrationId.equalsIgnoreCase("google")) {
        user1.setEmail(oauth2User.getAttribute("email").toString());
        user1.setName(oauth2User.getAttribute("name").toString());
        user1.setProfilePic(oauth2User.getAttribute("picture").toString());
        user1.setProviderUserId(oauth2User.getName());
        user1.setAbout("This is Generated by Google");
        user1.setProvider(Providers.GOOGLE);
        user1.setPassword("dummy");
       
    }
    
    else if (authorizedClientRegistrationId.equalsIgnoreCase("github")) {

      String email = oauth2User.getAttribute("eamil") != null ? oauth2User.getAttribute("email").toString()
          : oauth2User.getAttribute("login").toString() + "@gmail.com";
      String picture = oauth2User.getAttribute("avatar_url").toString();
      String name = oauth2User.getAttribute("login").toString();
      String providerUserId = oauth2User.getName();


      user1.setEmail(email);
      user1.setName(name);
      user1.setProfilePic(picture);
      user1.setAbout("This is Generated by Github");
      user1.setProviderUserId(providerUserId);
      user1.setProvider(Providers.GITHUB);
      user1.setPassword("dummy");
      
    }
    else if (authorizedClientRegistrationId.equalsIgnoreCase("linkedin")) {

    }
    else {
      logger.info("OAuthenticationSuccessHandler :: Unknown Provider");
    }

    User user2 = repo.findByEmail(user1.getEmail()).orElse(null);
    if (user2 == null) {
      repo.save(user1);
      logger.info("User Saved");
      }



    /*
    DefaultOAuth2User user = (DefaultOAuth2User) authentication.getPrincipal();

    logger.info(user.getName());
    
    user.getAttributes().forEach((key, value) -> {
      
      logger.info("{} => {}",key,value);
    });

    logger.info(user.getAuthorities().toString());

    String email = user.getAttribute("email").toString();
    String name = user.getAttribute("name").toString();
    String picture = user.getAttribute("picture").toString();


    User user1 = new User();
    user1.setEmail(email);
    user1.setName(name);
    user1.setProfilePic(picture);
    user1.setPassword("password");
    user1.setUserId(UUID.randomUUID().toString());
    user1.setProvider(Providers.GOOGLE);
    user1.setEnabled(true);
    user1.setEmailVerified(true);
    user1.setProviderUserId(user.getName());
    user1.setRoleList(List.of(AppConstant.ROLE_USER));
    user1.setAbout("This is Created by Google");

    User user2 = repo.findByEmail(email).orElse(null);
    if (user2 == null) {
      repo.save(user1);
      logger.info("User Saved");
      }
        */
    new DefaultRedirectStrategy().sendRedirect(request, response, "/user/profile");
  }
}
